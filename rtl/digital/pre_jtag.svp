/* *****************************************************************************
 * File: template.vp
 * Author: Ofer Shacham
 * 
 * Description:
 * This module is the top of the actual design.
 * 
 * REQUIRED GENESIS PARAMETERS:
 * ----------------------------
 * * IOList -  List of main design IOs. For each IO you must specify:
 *   * name
 *   * width
 *   * direction - allowed directions are 'in'/'out'
 *   * bsr - put IO on boundary scan? (yes/no)
 *   * pad - pad type (analog or anl/digital or dig)
 *   * orientation - Orientation of the IO pad. allowed values are {left, right, 
 *		     top, bottom}
 * 
 * SYSCLK_CFG_BUS_WIDTH (48) -  Bus width for system clocked configuration entities
 * SYSCLK_CFG_ADDR_WIDTH (18) - Address width for system clocked configuration entities
 * TESTCLK_CFG_BUS_WIDTH (32) - Bus width for test clocked configuration entities
 * TESTCLK_CFG_ADDR_WIDTH (12) - Address width for test clocked configuration entities
 * 
 * ds
 * Inputs:
 * -------
 * Main design inputs, plus  
 * inputs that regard the boundary scan and pads control
 * 
 * Outputs:
 * --------
 * Main design outputs, plus 
 * outputs that regard the boundary scan and pads control
 * 
 * Change bar:
 * -----------
 * Date          Author   Description
 * Mar 28, 2010  shacham  init version  --  
 * May 18, 2010  shacham  Added orientation feild to IO parameter list
 * May 24, 2010  shacham  Pulled config bus parameters to top level
 *			  Added cfg_ifc as the proper way to implement config
 *			  bus uniformity amongst modules.
 *			  Made declaration of IO params into a force_param to
 *			  make it immutable
 * ****************************************************************************/
// ACTUAL GENESIS2 PARAMETERIZATIONS
//; my $io_list = parameter(Name=>'IOList', Val=> 
//;		[	
//;		# Digital IOs
//;			# Some random signals for illustration. (connected to the reg file for no good reason)
$$			INSERT io_list_gen
//;							     				       
//;		# Digital, non-design specific IOs	     				       
//;			{name => 'tck',		bitwidth => 1,  direction => 'in',  bsr => 'no',  pad => 'digital', orientation => 'right'},
//;			{name => 'trst_n',	bitwidth => 1,  direction => 'in',  bsr => 'no',  pad => 'digital', orientation => 'right'},
//;			{name => 'tms',		bitwidth => 1,  direction => 'in',  bsr => 'no',  pad => 'digital', orientation => 'right'},
//;			{name => 'tdi',		bitwidth => 1,  direction => 'in',  bsr => 'no',  pad => 'digital', orientation => 'right'},
//;			{name => 'tdo',		bitwidth => 1,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;			{name => 'tdo_en',	bitwidth => 1,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'}
//;		], 
//;		Doc=>"List of all IOs of the chip with meta information about 'width', 'direction' (in/out), 'bsr' which is boundry scan register (yes/no), ".
//; 		     " 'pad' (digital/analog), and 'orientation' (top/bottom/left/right)",
//;             Force=>1 );
//; my $num_ios = scalar(@{$io_list});
//;
//;# Verify correctness of IO parameters:
//; my $cnt = 0;
//; foreach my $io (@{$io_list}){
//;   $self->error("IO $cnt is missing it's name!") 
//;	unless defined $io->{name};
//;   $self->error("IO $io->{name} (IO\# $cnt) is missing its width!") 
//;	unless defined $io->{bitwidth};
//;   $self->error("IO $io->{name} (IO\# $cnt) has an illegal width -->$io->{bitwidth}<--!") 
//;	if ($io->{bitwidth} < 1);
//;   $self->error("IO $io->{name} (IO\# $cnt) is missing its direction!") 
//;	unless defined $io->{direction};
//;   $self->error("IO $io->{name} (IO\# $cnt) has an invalid direction -->$io->{direction}<--! ".
//;		   "(allowed values: in/out)") 
//;	unless ($io->{direction} =~ m/^(in|out)$/i);
//;   $self->error("IO $io->{name} (IO\# $cnt) does not specify whether it's on the boundary scan!") 
//;	unless defined $io->{bsr};
//;   $self->error("IO $io->{name} (IO\# $cnt) has an invalid bsr flag -->$io->{bsr}<--! ".
//;		   "(allowed values: yes/no)") 
//;	unless ($io->{bsr} =~ m/^(yes|no)$/i);
//;   $cnt++;
//; } # end of "foreach my $io..."
//;
//;
//; # First we create an interface for this chip
//; my $ifc = generate('raw_jtag_ifc', 'ifc', IOList => $io_list);
//;
//; # this would enable others to use this interface
//; parameter(Name=>'IfcPtr', Val=>$ifc, force=>1, Doc=>"Declaring our interface object for others to use");
//;
//;  
//; # Now, let's decide upon the parameters of the two configuration buses:
$$			INSERT sc_cfg_bus_info 
$$			INSERT tc_cfg_bus_info 

module `mname`
  (
   // main IOs
   `$ifc->mname`.des ifc,
     
   // Signals for the Boundary Scan Register (these are not chip IOs though)
   output wire logic bsr_tdi,
   output wire logic bsr_sample,
   output wire logic	bsr_intest,
   output wire logic bsr_extest,
   output wire logic bsr_update_en,
   output wire logic bsr_capture_en,
   output wire logic bsr_shift_dr,
   input wire logic	bsr_tdo
   );

   //  Config interfaces for system and test clock domains
$$	INSERT sc_rf2rf_gen
$$	INSERT sc_rf2rf_int
$$	INSERT tc_rf2rf_gen
$$	INSERT tc_rf2rf_int

   // Reset to the test clock domain (this is different than the trst signal)
   logic 				test_logic_reset;


   //;
   //;
   //;
   //; # Create the JTAG to reg-files controller object
$$ INSERT jtag_regfile_gen
   //;
			
   // Instantiate the JTAG to reg-files controller
   `$cfg_dbg->instantiate`
     (
      // JTAG signals
      .tms(ifc.tms),
      .tck(ifc.tck),
      .trst_n(ifc.trst_n),
      .tdi(ifc.tdi),
      .tdo(ifc.tdo),
      .tdo_en(ifc.tdo_en),
      
      // BSR interface
      .bsr_extest(bsr_extest),
      .bsr_intest(bsr_intest),
      .bsr_sample(bsr_sample),
      .bsr_capture_en(bsr_capture_en),
      .bsr_shift_dr(bsr_shift_dr),
      .bsr_update_en(bsr_update_en),
      .bsr_tdo(bsr_tdo),
      .bsr_tdi(bsr_tdi),
      
      // signals to the system clocked regfile
$$    INSERT sc_jtag_regfile_con
      .Clk(ifc.Clk),
      .Reset(ifc.Reset),
      
      // signals to the jtag clocked regfile
$$    INSERT tc_jtag_regfile_con
      .test_logic_reset(test_logic_reset)
      );

   
   // Instantiate a couple of SYSTEM CLOCK domain reg-files and concatenate them
   // Note that signals A and B are IO's to the system. We'll also define signal C here:
   //; my $sc_cfg_ops = $cfg_dbg->get_param('SC_CFG_OPCODES');
$$		INSERT sc_regfile_gen
   
   // Instantiate a JTAG CLOCK domain reg-file
   // Note that signals D and E are IO's to the system. We'll also define signal F here.
   // for testing purposes well init this signal (non synthesizable!)
   //; my $tc_cfg_ops = $cfg_dbg->get_param('TC_CFG_OPCODES');
$$ INSERT tc_regfile_gen


   
endmodule // `mname`

